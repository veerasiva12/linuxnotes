AWK

print all data from a file
awk '{ print $0 }' awkTest.txt

print one more colum
awk '{ print $1 , $2 }' awkTest.txt

print with sepetaror (any)
awkTest.txt | awk '{ print $1 "- " $2 }' | head

prashanth@prashanth:~$ cat awkTest.txt | awk '{ print $1 "- " $2 }' | head -n 5
USER- PID
root- 1
root- 2
root- 3
root- 4
prashanth@prashanth:~$



>>>NR

Do not print specified rows

cat -n awkTest.txt | awk 'NR!=1{ print $1 " & " $2 " & " $3}' | head -n 10

prashanth@prashanth:~$ cat -n awkTest.txt | awk 'NR!=1{ print $1 " & " $2 " & " $3}' | head -n 10
2 & root & 1
3 & root & 2
4 & root & 3
5 & root & 4
6 & root & 6
7 & root & 9
8 & root & 10
9 & root & 11
10 & root & 12
11 & root & 13
prashanth@prashanth:~$

print selected rows

prashanth@prashanth:~$ cat -n awkTest.txt | awk 'NR<=7{ print $1 " & " $2 " & " $3}'
1 & USER & PID
2 & root & 1
3 & root & 2
4 & root & 3
5 & root & 4
6 & root & 6
7 & root & 9


AND && ( AND (&&) print if both conditions are true)

prashanth@prashanth:~$ cat -n awkTest.txt | awk 'NR>=1 && NR<=7{ print $1 " & " $2 " & " $3}'
1 & USER & PID
2 & root & 1
3 & root & 2
4 & root & 3
5 & root & 4
6 & root & 6
7 & root & 9
prashanth@prashanth:~$

prashanth@prashanth:~$ cat -n awkTest.txt | awk 'NR>1 && NR<=7{ print $1 " & " $2 " & " $3}'
2 & root & 1
3 & root & 2
4 & root & 3
5 & root & 4
6 & root & 6
7 & root & 9
prashanth@prashanth:~$


OR || ( OR (||) print if any one condition is true )

print records less then 5rows and print recodrd after 10 rows

prashanth@prashanth:~$ cat -n awkTest.txt | awk 'NR<5 || NR>=10{ print $1 " & " $2 " & " $3}' | head -n 20
1 & USER & PID
2 & root & 1
3 & root & 2
4 & root & 3
10 & root & 12
11 & root & 13
12 & root & 14
13 & root & 15
14 & root & 16
15 & root & 17
16 & root & 18
17 & root & 20
18 & root & 21
prashanth@prashanth:~$





Filter data

Conditionally select data

with numeric

[root@rebel-106 ~]# ps aux | awk '$2==718{print $0}'
chrony 718 0.0 0.0 117808 1728 ? S 21:25 0:00 /usr/sbin/chronyd
[root@rebel-106 ~]#

with stirng

[root@rebel-106 ~]# ps aux | awk '$11=="nginx:"{print $0}'
root 1227 0.0 0.0 39300 936 ? Ss 21:25 0:00 nginx: master process /usr/sbin/nginx
nginx 1228 0.0 0.0 39692 1820 ? S 21:25 0:00 nginx: worker process
nginx 1229 0.0 0.0 39692 1820 ? S 21:25 0:00 nginx: worker process
[root@rebel-106 ~]#

Filter data with OR ,AND

AND (&&) print if both conditions are true

awk '$1>=10 && $4>=5000{ print $0 }'

OR (||) print if any one condition is true

awk '$1>=10 || $4>=5000{ print $0 }'


Filter by paasing substring value in colum and record ?/ anywere in the row


awk '/gmail.com/{ print $0 }' file.txt

- ignore substring by !

awk '!/gmail.com/{ print $0 }' file.txt

- print exact string which requred in colum

string starting from p in 5th colum

awk '$5~"P"{ print $0 }' file.txt




search text at start (^)

ps aux | awk '/^root/ {print $0}

[root@rebel-106 ~]# ps aux | awk '/^r/ {print $0}' | head
root 1 0.0 0.1 128040 6676 ? Ss Oct16 0:03 /usr/lib/systemd/systemd --switched-root --system --deserialize 22
root 2 0.0 0.0 0 0 ? S Oct16 0:00 [kthreadd]
root 4 0.0 0.0 0 0 ? S< Oct16 0:00 [kworker/0:0H]
root 6 0.0 0.0 0 0 ? R Oct16 0:00 [ksoftirqd/0]
root 7 0.0 0.0 0 0 ? S Oct16 0:00 [migration/0]
root 8 0.0 0.0 0 0 ? S Oct16 0:00 [rcu_bh]
root 9 0.0 0.0 0 0 ? S Oct16 0:01 [rcu_sched]
root 10 0.0 0.0 0 0 ? S< Oct16 0:00 [lru-add-drain]
root 11 0.0 0.0 0 0 ? S Oct16 0:00 [watchdog/0]
root 12 0.0 0.0 0 0 ? S Oct16 0:00 [watchdog/1]
[root@rebel-106 ~]#


[root@rebel-106 ~]# ps aux | awk '$1~/^n/ {print $0}' | head
nginx 1228 0.0 0.0 39692 1820 ? S Oct16 0:00 nginx: worker process
nginx 1229 0.0 0.0 39692 1820 ? S Oct16 0:00 nginx: worker process
[root@rebel-106 ~]#

search text at end ($)



[root@rebel-106 ~]# ps aux | awk '$1~/x$/ {print $0}' | head
nginx 1228 0.0 0.0 39692 1820 ? S Oct16 0:00 nginx: worker process
nginx 1229 0.0 0.0 39692 1820 ? S Oct16 0:00 nginx: worker process
postfix 1282 0.0 0.1 90320 4252 ? S Oct16 0:00 qmgr -l -t unix -u
postfix 2412 0.0 0.1 90252 4224 ? S Oct16 0:00 pickup -l -t unix -u
[root@rebel-106 ~]#
[root@rebel-106 ~]#
[root@rebel-106 ~]#


combine start and end

[root@rebel-106 ~]# ps aux | awk '$1~/^n/ && $1~/x$/ {print $0}' | head
nginx 1228 0.0 0.0 39692 1820 ? S Oct16 0:00 nginx: worker process
nginx 1229 0.0 0.0 39692 1820 ? S Oct16 0:00 nginx: worker process
[root@rebel-106 ~]#









if-else Conditions

if

[root@rebel-106 ~]# awk -F "|" '{ if ($3 >= 40000) print $0 }' data.txt
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
[root@rebel-106 ~]#

&& if both conditions is true

[root@rebel-106 ~]# awk -F "|" '{ if ($3 >= 20000 && $3 <= 40000) print $0 }' data.txt
3|bhahu|40000
4|linux|30000
[root@rebel-106 ~]#


|| if any one condition is true

[root@rebel-106 ~]# awk -F "|" '{ if ($3 >= 20000 || $1 == 4) print $0 }' data.txt
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
4|linux|30000
[root@rebel-106


if-else

[root@rebel-106 ~]# awk -F "|" '{if ($3 >= 45000) print $0 ; else print "---not mached items";}' data.txt
id|name|salary
1|prashanth|50000
2|rebel|45000
---not mached items
---not mached items
[root@rebel-106 ~]#








if else-if else

[root@rebel-106 ~]# awk -F "|" '{if($3 >= 25000 && $3 <= 30000) print$2 "-> you tax is 20" ; else if($3 >= 30001 && $3 <= 50000) print$2 "your tax is 30%"; else print$2 " your tax is 10%" }' data.txt
name your tax is 10% -- remove header NR!=1
prashanthyour tax is 30%
rebelyour tax is 30%
bhahuyour tax is 30%
linux-> you tax is 20
mr.xxx your tax is 10%
[root@rebel-106 ~]#

remove header

[root@rebel-106 ~]# awk -F "|" 'NR!=1{if($3 >= 25000 && $3 <= 30000) print$2 "-> you tax is 20" ; else if($3 >= 30001 && $3 <= 50000) print$2 "your tax is 30%"; else print$2 " your tax is 10%" }' data.txt
prashanthyour tax is 30%
rebelyour tax is 30%
bhahuyour tax is 30%
linux-> you tax is 20
mr.xxx your tax is 10%
[root@rebel-106 ~]#


Blocks

BEGIN block

[root@rebel-106 ~]# awk -F "|" 'BEGIN{print "printing tax accoriding to slary"} NR!=1{if($3 >= 25000 && $3 <= 30000) print$2 "-> you tax is 20" ; else if($3 >= 30001 && $3 <= 50000) print$2 "your tax is 30%"; else print$2 " your tax is 10%" }' data.txt


printing tax accoriding to slary
prashanthyour tax is 30%
rebelyour tax is 30%
bhahuyour tax is 30%
linux-> you tax is 20
mr.xxx your tax is 10%
[root@rebel-106 ~]#
[root@rebel-106 ~]#
[root@rebel-106 ~]#








[root@rebel-106 ~]# awk -F "|" 'BEGIN{print "========printing tax accoriding to slary==========="} NR!=1{if($3 >= 25000 && $3 <= 30000) print$2 "-> you tax is 20" ; else if($3 >= 30001 && $3 <= 50000) print$2 "your tax is 30%"; else print$2 " your tax is 10%" } END {print "======task Done=========="}' data.txt


========printing tax accoriding to slary===========
prashanthyour tax is 30%
rebelyour tax is 30%
bhahuyour tax is 30%
linux-> you tax is 20
mr.xxx your tax is 10%
======task Done==========
[root@rebel-106 ~]#


Print out put with header

root@prashanth:~# pidstat | awk 'NR==3 || $10 >= 10'
05:36:16 PM IST UID PID %usr %system %guest %wait %CPU CPU Command
05:36:16 PM IST 1000 4360 15.57 2.11 0.00 0.13 17.69 0 thunderbird-bin
root@prashanth:~#

root@prashanth:~# pidstat | awk 'NR==3 || $10 >= 10 {print $0}'
05:40:42 PM IST UID PID %usr %system %guest %wait %CPU CPU Command
05:40:42 PM IST 1000 4360 15.51 2.10 0.00 0.13 17.62 3 thunderbird-bin
root@prashanth:~#
root@prashanth:~#





SED
sed (stream editor)
used to display and edit data
edtiting options - insertion , addition , deletion
2Types of opetrations
1 Line Addressing
2 Context Addressing
[root@rebel-106 ~]# cat -n data.txt
1 id|name|salary
2 1|prashanth|50000
3 2|rebel|45000
4 3|bhahu|40000
5 4|linux|30000
6 5|mr.xxx|20000
[root@rebel-106 ~]#

Display specific line
[root@rebel-106 ~]# sed -n &#39;5p&#39; data.txt
4|linux|30000
[root@rebel-106 ~]#
Display last line
[root@rebel-106 ~]# sed -n &#39;$p&#39; data.txt
5|mr.xxx|20000
[root@rebel-106 ~]#
Display Range of line
[root@rebel-106 ~]# sed -n &#39;2,4p&#39; data.txt
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
[root@rebel-106 ~]#
Skip lines in results ( !p )
[root@rebel-106 ~]# cat -n data.txt | sed -n &#39;2,4!p&#39;
1 id|name|salary
5 4|linux|30000
6 5|mr.xxx|20000
Context Addressing
Display lines having specific word
[root@rebel-106 ~]# sed -n &#39;/linux/p&#39; data.txt
4|linux|30000
[root@rebel-106 ~]#
Display lines having specific word by ignoring case
[root@rebel-106 ~]# sed -n &#39;/[Ll]inux/p&#39; data.txt
4|linux|30000
6|Linux|30000
[root@rebel-106 ~]#
write/save out to new file ( W )
sed -n &#39;/[Ll]inux/w out.txt&#39; data.txt
[root@rebel-106 ~]# cat out.txt
4|linux|30000
6|Linux|30000
substutute data in file ( sed ‘s/old/new/’ data.txt)
[root@rebel-106 ~]# sed &#39;s/30000/100/&#39; data.txt
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
4|linux|100
5|mr.xxx|20000
6|Linux|100
Replace multiple data in a file ( sed -e) -e extende operation
[root@rebel-106 ~]# sed -e &#39;s/30000/10/&#39; -e &#39;s/45000/15/&#39; data.txt
id|name|salary
1|prashanth|50000
2|rebel|15
3|bhahu|40000
4|linux|10
5|mr.xxx|20000
6|Linux|10

Replace/substitute data by checking conditions
my condition is linux
[root@rebel-106 ~]# sed &#39;/linux/s/30000/150/&#39; data.txt
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
4|linux|150
5|mr.xxx|20000
6|Linux|30000
Delete line or data from file (d)
[root@rebel-106 ~]# sed &#39;/linux/d&#39; data.txt (for entire row)
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
5|mr.xxx|20000
6|Linux|30000
[root@rebel-106 ~]# sed &#39;/[Ll]inux/d&#39; data.txt
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
5|mr.xxx|20000
[root@rebel-106 ~]#

Insert /add line in a file ( i )
[root@rebel-106 ~]# sed &#39;1i this is sed practicing&#39; data.txt
this is sed practicing
id|name|salary
1|prashanth|50000
2|rebel|45000
3|bhahu|40000
4|linux|30000
5|mr.xxx|20000
6|Linux|30000